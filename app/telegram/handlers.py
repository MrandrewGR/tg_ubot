import logging
import asyncio
from telethon import events
from telethon.tl.types import Message

from app.config import settings
from app.utils import human_like_delay, get_delay_settings
from app.process_messages import serialize_message
# Replaced import: –º—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º upsert
from mirco_services_data_management.db import ensure_partitioned_parent_table, upsert_partitioned_record

logger = logging.getLogger("unified_handler")


def register_unified_handler(
    client,
    message_buffer: asyncio.Queue,
    userbot_active: asyncio.Event,
    chat_id_to_data: dict,
    state_mgr=None
):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π,
    –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —á–∞—Ç–∞–º–∏ –∏–∑ `target_ids`.
    """
    target_ids = list(chat_id_to_data.keys())
    logger.info(f"Registering unified_handler for chats: {target_ids}")

    @client.on(events.NewMessage(chats=target_ids))
    async def on_new_message(event):
        if state_mgr is not None:
            state_mgr.record_new_message()
        if not userbot_active.is_set():
            return
        await process_message_event(event, "new_message", message_buffer, chat_id_to_data)

    @client.on(events.MessageEdited(chats=target_ids))
    async def on_edited_message(event):
        if state_mgr is not None:
            state_mgr.record_new_message()
        if not userbot_active.is_set():
            return
        await process_message_event(event, "edited_message", message_buffer, chat_id_to_data)


async def process_message_event(event, event_type, message_buffer, chat_id_to_data):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:
      1) –í—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ "—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ" –ø–æ–≤–µ–¥–µ–Ω–∏—è,
      2) –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–∫—Ü–∏—è—Ö),
      3) –ü–æ–º–µ—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥—å (–¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka),
      4) –í—ã–ø–æ–ª–Ω—è–µ—Ç upsert –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        msg: Message = event.message
        chat_info = chat_id_to_data.get(msg.chat_id)
        if not chat_info:
            logger.warning(f"No chat_info for chat_id={msg.chat_id}, skipping.")
            return

        # –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        dmin, dmax = get_delay_settings("chat")
        await human_like_delay(dmin, dmax)

        # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
        data = serialize_message(msg, event_type, chat_info)
        if not data:
            return

        # –ü–æ–º–µ—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è Kafka
        topic = settings.UBOT_PRODUCE_TOPIC
        await message_buffer.put((topic, data))

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "messages_<chat_username>" –∏–ª–∏ "messages_<chat_id>")
        if chat_info.get("chat_username"):
            table_suffix = chat_info["chat_username"].lstrip("@").lower()
        else:
            table_suffix = str(msg.chat_id)
        table_name = "messages_" + table_suffix

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è partition-—Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞
        ensure_partitioned_parent_table(table_name)

        # Upsert –≤ –ë–î
        inserted = upsert_partitioned_record(table_name, data)
        if inserted:
            logger.info(f"[unified_handler] Inserted new row for msg_id={msg.id} in {table_name}.")
        else:
            logger.info(f"[unified_handler] Updated existing row for msg_id={msg.id} in {table_name}.")

        logger.info(f"[unified_handler] Processed {event_type} msg_id={msg.id} chat_id={msg.chat_id}")

    except Exception as e:
        logger.exception(f"[unified_handler] Error: {e}")


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "push" –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
# –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "push" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username, —Ä–∞–≤–Ω—ã–º settings.ADMIN_USERNAME,
# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏.
@events.register(events.NewMessage)
async def on_admin_push(event):
    logger.info("on_admin_push –≤—ã–∑–≤–∞–Ω!")
    try:
        text = event.message.raw_text.strip().lower()
        if text != "push":
            return

        sender = await event.get_sender()
        if not sender or not getattr(sender, "username", None):
            return

        sender_username = "@" + sender.username.lower()
        logger.info(f"ADMIN_USERNAME from config: {settings.ADMIN_USERNAME}")
        logger.info(f"Sender username: {sender_username}")

        if sender_username != settings.ADMIN_USERNAME.lower():
            logger.info("Sender is not admin, ignoring push command.")
            return

        logger.info(f"Received admin push command from {sender_username}.")

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
        top_msg = {
            "message_id": 9999,
            "clown_count": 12,
            "chat_id": -10012345678,
            "text": "This is the best ü§° message",
        }
        publish_text = (
            f"**Top clown-emoji message (24h)**\n\n"
            f"Message ID: {top_msg['message_id']}\n"
            f"Clown Count: {top_msg['clown_count']}\n"
            f"Chat ID: {top_msg['chat_id']}\n"
            f"Text: {top_msg['text'] or '(no text)'}"
        )

        await event.client.send_message(settings.PUBLISH_CHANNEL, publish_text)
        logger.info("Publication triggered by admin push command.")
        await event.reply("Publication triggered.")
    except Exception as e:
        logger.exception(f"Error in admin push handler: {e}")
        await event.reply("Failed to trigger publication.")
